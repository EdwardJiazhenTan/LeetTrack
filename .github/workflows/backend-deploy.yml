name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-deploy.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  test-and-lint:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xvfb gunicorn

      - name: Code formatting check (black)
        working-directory: ./backend
        run: |
          source venv/bin/activate
          black --check --diff .

      - name: Lint code (flake8)
        working-directory: ./backend
        run: |
          source venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan (bandit)
        working-directory: ./backend
        run: |
          source venv/bin/activate
          pip install bandit
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          FLASK_ENV: testing
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          SECRET_KEY: test-secret-key-for-ci
          JWT_SECRET_KEY: test-jwt-secret-key-for-ci
        run: |
          source venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          directory: ./backend
          flags: backend
          name: backend-coverage

  deploy-to-ec2:
    name: Deploy to EC2
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "üöÄ Starting backend deployment..."
            
            # Check and install system dependencies
            echo "üîç Checking system dependencies..."
            if ! command -v python3 &> /dev/null; then
                echo "Installing Python3..."
                sudo apt update
                sudo apt install -y python3 python3-pip python3-venv
            fi
            
            if ! command -v python3-venv &> /dev/null && ! python3 -m venv --help &> /dev/null; then
                echo "Installing python3-venv..."
                sudo apt update
                sudo apt install -y python3-venv
            fi
            
            # Navigate to project directory - FIXED PATH
            cd LeetTrack/backend
            
            # Debug: Check current directory structure
            echo "üìÇ Current directory: $(pwd)"
            echo "üìÇ Directory contents:"
            ls -la
            
            # Check Git repository status
            echo "üîç Git repository diagnosis:"
            cd ..  # Go to LeetTrack root for git operations
            echo "Branch: $(git branch --show-current)"
            echo "Remote URL: $(git remote get-url origin)"
            echo "Last commit: $(git log -1 --oneline)"
            echo "Git status:"
            git status --porcelain
            
            # Backup current version (only if backend exists)
            if [ -d "backend" ]; then
                echo "üì¶ Creating backup..."
                cp -r backend backend_backup_$(date +%Y%m%d_%H%M%S) || echo "Backup failed but continuing..."
            else
                echo "‚ö†Ô∏è No backend directory found - checking repository integrity"
            fi
            
            # Pull latest changes with verbose output
            echo "üì• Pulling latest changes..."
            git fetch origin main
            echo "üì• Git fetch completed. Checking differences..."
            git diff HEAD origin/main --name-only
            
            # Reset to ensure clean state
            echo "üîÑ Resetting to clean repository state..."
            git reset --hard origin/main
            
            # Check if backend directory exists after reset
            if [ ! -d "backend" ]; then
                echo "‚ùå Backend directory still missing after git reset!"
                echo "üîç Attempting repository recovery..."
                
                # Check disk space
                echo "üíæ Disk space:"
                df -h
                
                # Check file count in git
                echo "üìä Files tracked by git:"
                git ls-files | grep backend | wc -l
                echo "üìä Sample backend files in git:"
                git ls-files | grep backend | head -5
                
                # Try alternative: clean checkout
                echo "üîÑ Attempting clean checkout..."
                git clean -fd
                git checkout HEAD -- .
                
                # Final check
                if [ ! -d "backend" ]; then
                    echo "‚ùå CRITICAL: Cannot recover backend directory"
                    echo "üìã Repository state:"
                    git log --oneline -5
                    echo "üìã Working directory:"
                    find . -maxdepth 2 -type d | sort
                    exit 1
                fi
            fi
            
            echo "‚úÖ Backend directory confirmed present"
            cd backend
            
            # Verify critical files exist
            if [ ! -f "app.py" ] || [ ! -f "wsgi.py" ]; then
                echo "‚ùå Critical backend files missing!"
                ls -la
                exit 1
            fi
            
            # Create virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
                echo "üêç Creating Python virtual environment..."
                python3 -m venv venv
            fi
            
            # Activate virtual environment
            echo "üîß Activating virtual environment..."
            source venv/bin/activate
            
            # Install/update dependencies including gunicorn
            echo "üì¶ Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install gunicorn
            
            # Create logs directory for gunicorn
            echo "üìÅ Creating logs directory..."
            mkdir -p logs
            
            # Set environment variables for Flask commands
            export FLASK_APP=app.py
            export FLASK_ENV=production
            
            # Run database migrations
            echo "üóÑÔ∏è Running database migrations..."
            flask db upgrade || echo "No migrations to run"
            
            # Test application startup
            echo "üß™ Testing application..."
            python -c "from wsgi import app; print('‚úÖ Application imports successfully')"
            
            # Find and gracefully restart gunicorn
            echo "üîÑ Restarting application..."
            
            # Try systemd service first
            if systemctl is-active --quiet leettrack-backend; then
                echo "Restarting via systemd..."
                sudo systemctl reload leettrack-backend
            elif systemctl is-active --quiet gunicorn; then
                echo "Restarting via systemd gunicorn..."
                sudo systemctl reload gunicorn
            else
                # Fallback: find gunicorn process and send HUP signal
                echo "Finding gunicorn process..."
                GUNICORN_PID=$(pgrep -f "gunicorn.*wsgi:app" | head -1)
                if [ ! -z "$GUNICORN_PID" ]; then
                    echo "Sending HUP signal to gunicorn PID: $GUNICORN_PID"
                    kill -HUP $GUNICORN_PID
                else
                    echo "No gunicorn process found, starting new one..."
                    nohup gunicorn --config gunicorn.conf.py wsgi:app > gunicorn.log 2>&1 &
                fi
            fi
            
            # Wait for application to restart
            echo "‚è≥ Waiting for application to restart..."
            sleep 10
            
            echo "‚úÖ Backend deployment completed!"
          EOF

      - name: Health check
        run: |
          echo "üè• Running health check..."

          # Wait a bit more for the service to be fully ready
          sleep 15

          # Test API endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://api.leettrack.app/api/health || echo "000")

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Health check passed! API is responding correctly."
          else
            echo "‚ùå Health check failed! HTTP Code: $HTTP_CODE"
            echo "Attempting to check service status..."
            
            ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Checking service status..."
            systemctl status leettrack-backend || systemctl status gunicorn || echo "No systemd service found"
            echo "Checking gunicorn processes..."
            ps aux | grep gunicorn
            echo "Checking recent logs..."
            tail -20 /home/ubuntu/LeetTrack/backend/gunicorn.log || echo "No gunicorn.log found"
          EOF
            
            exit 1
          fi

      - name: Deployment success notification
        if: success()
        run: |
          echo "üéâ Backend deployment successful!"
          echo "üåê API URL: https://api.leettrack.app"
          echo "üìä Health check: ‚úÖ PASSED"
          echo "‚è∞ Deployed at: $(date)"

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed, attempting rollback..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF' || true
            cd /home/ubuntu/LeetTrack
            LATEST_BACKUP=$(ls -t backend_backup_* 2>/dev/null | head -1)
            if [ ! -z "$LATEST_BACKUP" ]; then
              echo "Rolling back to: $LATEST_BACKUP"
              rm -rf backend
              mv "$LATEST_BACKUP" backend
              cd backend
              source venv/bin/activate
              # Restart with previous version
              GUNICORN_PID=$(pgrep -f "gunicorn.*wsgi:app" | head -1)
              if [ ! -z "$GUNICORN_PID" ]; then
                kill -HUP $GUNICORN_PID
              fi
              echo "Rollback completed"
            else
              echo "No backup found for rollback"
            fi
          EOF
