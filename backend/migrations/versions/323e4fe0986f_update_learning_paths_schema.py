"""Update learning paths schema

Revision ID: 323e4fe0986f
Revises: 
Create Date: 2025-06-10 18:34:10.082714

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '323e4fe0986f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_learning_paths',
    sa.Column('user_path_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('path_id', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('completion_percentage', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['path_id'], ['learning_paths.path_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('user_path_id'),
    sa.UniqueConstraint('user_id', 'path_id', name='uq_user_path')
    )
    op.create_table('user_path_questions',
    sa.Column('user_path_question_id', sa.Integer(), nullable=False),
    sa.Column('user_path_id', sa.Integer(), nullable=False),
    sa.Column('path_question_id', sa.Integer(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['path_question_id'], ['path_questions.path_question_id'], ),
    sa.ForeignKeyConstraint(['user_path_id'], ['user_learning_paths.user_path_id'], ),
    sa.PrimaryKeyConstraint('user_path_question_id'),
    sa.UniqueConstraint('user_path_id', 'path_question_id', name='uq_user_path_question')
    )
    with op.batch_alter_table('sample_projects', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_sample_projects_created'))
        batch_op.drop_index(batch_op.f('idx_sample_projects_dates'))
        batch_op.drop_index(batch_op.f('idx_sample_projects_priority'))
        batch_op.drop_index(batch_op.f('idx_sample_projects_status'))

    op.drop_table('sample_projects')
    with op.batch_alter_table('learning_paths', schema=None) as batch_op:
        batch_op.add_column(sa.Column('creator_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('is_public', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('difficulty_level', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('estimated_hours', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('tags', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
        batch_op.create_foreign_key(None, 'users', ['creator_id'], ['user_id'])

    with op.batch_alter_table('path_questions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('notes', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('estimated_minutes', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('importance', sa.Integer(), nullable=True))
        batch_op.alter_column('path_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('question_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index(batch_op.f('idx_path_questions_path_id'))
        batch_op.drop_constraint(batch_op.f('path_questions_path_id_question_id_key'), type_='unique')
        batch_op.drop_constraint(batch_op.f('path_questions_path_id_sequence_number_key'), type_='unique')
        batch_op.create_unique_constraint('uq_path_question', ['path_id', 'question_id'])
        batch_op.create_unique_constraint('uq_path_sequence', ['path_id', 'sequence_number'])
        batch_op.drop_constraint(batch_op.f('path_questions_path_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('path_questions_question_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'questions', ['question_id'], ['question_id'])
        batch_op.create_foreign_key(None, 'learning_paths', ['path_id'], ['path_id'])

    with op.batch_alter_table('questions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('difficulty', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('tags', sa.String(length=500), nullable=True))
        batch_op.add_column(sa.Column('acceptance_rate', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('frequency', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True))

    with op.batch_alter_table('review_schedule', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index(batch_op.f('idx_review_schedule_user_date'))
        batch_op.drop_constraint(batch_op.f('review_schedule_user_id_review_date_key'), type_='unique')
        batch_op.create_unique_constraint('user_date_unique', ['user_id', 'review_date'])

    with op.batch_alter_table('scheduled_reviews', schema=None) as batch_op:
        batch_op.alter_column('schedule_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('user_question_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index(batch_op.f('idx_scheduled_reviews_schedule_id'))
        batch_op.drop_constraint(batch_op.f('scheduled_reviews_schedule_id_user_question_id_key'), type_='unique')
        batch_op.create_unique_constraint('schedule_question_unique', ['schedule_id', 'user_question_id'])

    with op.batch_alter_table('user_questions', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('question_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_index(batch_op.f('idx_user_questions_next_review'))
        batch_op.drop_index(batch_op.f('idx_user_questions_user_id'))
        batch_op.drop_constraint(batch_op.f('user_questions_user_id_question_id_key'), type_='unique')
        batch_op.create_unique_constraint('user_question_unique', ['user_id', 'question_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_questions', schema=None) as batch_op:
        batch_op.drop_constraint('user_question_unique', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('user_questions_user_id_question_id_key'), ['user_id', 'question_id'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_user_questions_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_user_questions_next_review'), ['next_review'], unique=False)
        batch_op.alter_column('question_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('scheduled_reviews', schema=None) as batch_op:
        batch_op.drop_constraint('schedule_question_unique', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('scheduled_reviews_schedule_id_user_question_id_key'), ['schedule_id', 'user_question_id'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_scheduled_reviews_schedule_id'), ['schedule_id'], unique=False)
        batch_op.alter_column('user_question_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('schedule_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('review_schedule', schema=None) as batch_op:
        batch_op.drop_constraint('user_date_unique', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('review_schedule_user_id_review_date_key'), ['user_id', 'review_date'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_review_schedule_user_date'), ['user_id', 'review_date'], unique=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('questions', schema=None) as batch_op:
        batch_op.drop_column('last_updated')
        batch_op.drop_column('frequency')
        batch_op.drop_column('acceptance_rate')
        batch_op.drop_column('tags')
        batch_op.drop_column('description')
        batch_op.drop_column('difficulty')

    with op.batch_alter_table('path_questions', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('path_questions_question_id_fkey'), 'questions', ['question_id'], ['question_id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('path_questions_path_id_fkey'), 'learning_paths', ['path_id'], ['path_id'], ondelete='CASCADE')
        batch_op.drop_constraint('uq_path_sequence', type_='unique')
        batch_op.drop_constraint('uq_path_question', type_='unique')
        batch_op.create_unique_constraint(batch_op.f('path_questions_path_id_sequence_number_key'), ['path_id', 'sequence_number'], postgresql_nulls_not_distinct=False)
        batch_op.create_unique_constraint(batch_op.f('path_questions_path_id_question_id_key'), ['path_id', 'question_id'], postgresql_nulls_not_distinct=False)
        batch_op.create_index(batch_op.f('idx_path_questions_path_id'), ['path_id'], unique=False)
        batch_op.alter_column('question_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('path_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('importance')
        batch_op.drop_column('estimated_minutes')
        batch_op.drop_column('notes')

    with op.batch_alter_table('learning_paths', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('updated_at')
        batch_op.drop_column('tags')
        batch_op.drop_column('estimated_hours')
        batch_op.drop_column('difficulty_level')
        batch_op.drop_column('is_public')
        batch_op.drop_column('creator_id')

    op.create_table('sample_projects',
    sa.Column('project_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('budget', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('is_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint('priority >= 1 AND priority <= 5', name=op.f('sample_projects_priority_check')),
    sa.PrimaryKeyConstraint('project_id', name=op.f('sample_projects_pkey'))
    )
    with op.batch_alter_table('sample_projects', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_sample_projects_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_sample_projects_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('idx_sample_projects_dates'), ['start_date', 'end_date'], unique=False)
        batch_op.create_index(batch_op.f('idx_sample_projects_created'), ['created_at'], unique=False)

    op.drop_table('user_path_questions')
    op.drop_table('user_learning_paths')
    # ### end Alembic commands ###
